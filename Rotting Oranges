// solved using BFS and using 2d arrays

class Solution {
    public static class pair{
        int src;
        int dest;
        int time;
        public pair(int src,int dest,int time){
            this.src = src;
            this.dest = dest;
            this.time = time;
        }
    }
    public int orangesRotting(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int vis[][] = new int[n][m];
        int fresh_count = 0;
        Queue<pair> queue = new LinkedList<>();
        for(int i = 0;i < n;i++){
            for(int j = 0;j<m;j++){
                if(grid[i][j]==2){
                    queue.add(new pair(i,j,0));
                    vis[i][j] = 2;
                }
                else{
                    vis[i][j] = 0;
                }
                if(grid[i][j] == 1)fresh_count++;
            }
        }
        int[] drow = {-1,0,1,0};
        int[] dcol = {0,1,0,-1};
        int tm = 0;
        int cnt =0;
        while(!queue.isEmpty()){
            pair curr = queue.remove();
            int r = curr.src;
            int c = curr.dest;
            int t = curr.time;
            for(int i =0;i<4;i++){
                int nrow = r+drow[i];
                int ncol = c+dcol[i];
                tm = Math.max(tm,t);
                if(nrow>=0 && nrow<n && ncol>=0 && ncol < m && vis[nrow][ncol]==0 && grid[nrow][ncol]==1){
                    queue.add(new pair(nrow,ncol,t+1));
                    vis[nrow][ncol] = 2;
                    cnt++;
                }
            }
        }
        if(cnt != fresh_count)return -1;
        return tm;
        
    }
}
