class Solution {
    public static class pair{
        int src;
        int dest;
        public pair(int src,int dest){
            this.src = src;
            this.dest = dest;
        }
    }
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        int n = image.length;
        int m = image[0].length;
        int pixel = image[sr][sc];
        Queue<pair> queue = new LinkedList<>();
        queue.add(new pair(sr,sc));
        int[] drow = {-1,0,1,0};
        int[] dcol = {0,1,0,-1};
        int[][] vis = new int[n][m];
        for(int i = 0;i<n;i++){
            Arrays.fill(vis[i],0);
        }
        while(!queue.isEmpty()){
            pair curr = queue.remove();
            int r = curr.src;
            int c = curr.dest;
            vis[r][c] = 1;
            image[r][c] = color;
            for(int i = 0;i < 4;i++){
                int nrow = r + drow[i];
                int ncol = c + dcol[i];
                if(nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && image[nrow][ncol] == pixel && vis[nrow][ncol] == 0){
                    queue.add(new pair(nrow,ncol));
                    vis[nrow][ncol] = 1;
                }
            }
        }
        return image;


    }
}
